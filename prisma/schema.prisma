generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique
  password       String
  firstName      String
  lastName       String
  state          String
  phoneNumber    String?        // Optional contact number
  role           String         @default("user") // For role-based access
  searchCount    Int            @default(0)      // Free usage tracking
  isPaid         Boolean        @default(false)  // Stripe subscription flag
  emailVerified  DateTime?                        // Required for NextAuth adapter

  accounts       Account[]
  sessions       Session[]
  files          UploadedFile[]

  @@map("users")
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int? 
  token_type         String? 
  scope              String? 
  id_token           String? 
  session_state      String? 

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model UploadedFile {
  id        String   @id @default(cuid())
  userId    String
  filename  String
  mimetype  String
  content   String   // Full parsed text from file
  summary   String?  // AI summary or classification
  createdAt DateTime @default(now())

  User      User     @relation(fields: [userId], references: [id])

  @@map("uploaded_files")
}